{
    "actions": [
        {
            "code": [
                {
                    "file": "Archive_Unpack_code.js",
                    "name": "Archive_Unpack_code"
                }
            ],
            "description": {
                "en": "Unpack archive",
                "ru": "Распаковать архив"
            },
            "interface": "Archive_Unpack_interface.js",
            "is_element": false,
            "name": "Archive_Unpack",
            "select": "Archive_Unpack_select.js",
            "template": "{{ArchivePath}} -> {{DestinationPath}}",
            "suggestion":{"en": "zip, rar, 7z, unzip","ru": "zip, rar, 7z, разархивировать"}

        },
        {
            "code": [
                {
                    "file": "Archive_ArchiveFolder_code.js",
                    "name": "Archive_ArchiveFolder_code"
                }
            ],
            "description": {
                "en": "Archive folder",
                "ru": "Заархивировать папку"
            },
            "interface": "Archive_ArchiveFolder_interface.js",
            "is_element": false,
            "name": "Archive_ArchiveFolder",
            "select": "Archive_ArchiveFolder_select.js",
            "template": "{{FolderPath}} -> {{DestinationPath}}",
            "suggestion":{"en": "zip, rar, 7z, unzip","ru": "zip, rar, 7z, разархивировать"}
        },
        {
            "code": [
                {
                    "file": "Archive_ArchiveFiles_code.js",
                    "name": "Archive_ArchiveFiles_code"
                }
            ],
            "description": {
                "en": "Archive files",
                "ru": "Заархивировать файлы"
            },
            "interface": "Archive_ArchiveFiles_interface.js",
            "is_element": false,
            "name": "Archive_ArchiveFiles",
            "select": "Archive_ArchiveFiles_select.js",
            "template": "{{DestinationPath}}",
            "suggestion":{"en": "zip, rar, 7z, create archive","ru": "zip, rar, 7z, запаковать"}
        },
        {
            "code": [
                {
                    "file": "Archive_GetFileList_code.js",
                    "name": "Archive_GetFileList_code"
                }
            ],
            "description": {
                "en": "Get file list from archive",
                "ru": "Получить список файлов из архива"
            },
            "interface": "Archive_GetFileList_interface.js",
            "is_element": false,
            "name": "Archive_GetFileList",
            "select": "Archive_GetFileList_select.js",
            "template": "{{ArchivePath}} -> {{Save}}",
            "suggestion":{"en": "zip, rar, 7z, create archive","ru": "zip, rar, 7z, запаковать"}
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "Archive_Unpack",
        "Archive_ArchiveFolder",
        "Archive_ArchiveFiles",
        "Archive_GetFileList"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with archives",
    "description_small": {
        "en": "Archive",
        "ru": "Архив"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "if(!global._UtilArchive){\n    const fs = require('fs');\n    const path = require('path');\n    let util = {};\n\n    util.lang = \"en\";\n\n    util.setLang = function(lang){\n        if(lang && (!util.lang || util.lang !== lang)){\n            util.lang = lang;\n        };\n    };\n\n    util.normalizePath = function(filePath, backSlash = false, resolve = true){\n        filePath = resolve ? path.resolve(filePath) : path.normalize(filePath);\n        return backSlash ? filePath : filePath.split(\"\\\\\").join(\"/\");\n    };\n\n    util.getPathInfo = function(filePath, isFolder, shouldExist){\n        let info = path.parse(filePath);\n        if(shouldExist && !fs.existsSync(filePath)){\n            throw util.lang==\"ru\" ? `не удалось найти ${isFolder ? 'папку' : 'файл'} \"${info.base}\" в директории \"${info.dir}\"` : `could not find ${isFolder ? 'folder' : 'file'} \"${info.base}\" in directory \"${info.dir}\"`;\n        };\n        return info;\n    };\n\n    util.getArchiveType = function(supportedTypes, archiveType, archivePath){\n        if(archiveType==\"auto\"){\n            let extension = path.extname(archivePath);\n            if(extension.startsWith(extension, '.')){\n                extension = extension.slice(1);\n            };\n            if(!supportedTypes.includes(extension) || extension.length < 1){\n                throw util.lang==\"ru\" ? `не удалось определить тип архива` : `could not determine archive type`;\n            };\n            return extension;\n        }else{\n            if(!supportedTypes.includes(archiveType) || archiveType.length < 1){\n                throw util.lang==\"ru\" ? `${archiveType} архивы не поддерживаются` : `${archiveType} archives are not supported`;\n            };\n            return archiveType;\n        };\n    };\n\n    util.ensureDirectoryExistence = function(filePath){\n        let dirname = path.dirname(filePath);\n        if(fs.existsSync(dirname)){\n            return true;\n        };\n        util.ensureDirectoryExistence(dirname);\n        fs.mkdirSync(dirname);\n        return false;\n    };\n\n    global._UtilArchive = util;\n};\n\nmodule.exports = global._UtilArchive;",
            "DataName": "UtilArchive",
            "DataType": 1,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilArchive || require(\"../UtilArchive\");\r\nlet {folderPath, destinationPath, archiveType, lang} = [[ARCHIVE_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    folderPath = util.normalizePath(folderPath);\r\n    let folderInfo = util.getPathInfo(folderPath, true, true);\r\n    archiveType = util.getArchiveType(['zip','7z'], archiveType, destinationPath);\r\n    destinationPath = destinationPath ? destinationPath : `${folderPath}.${archiveType}`;\r\n    destinationPath = util.normalizePath(destinationPath);\r\n\r\n    util.ensureDirectoryExistence(destinationPath);\r\n\r\n    await (new Promise((resolve, reject) => {\r\n        if(archiveType === 'zip'){\r\n            const archiver = require('archiver');\r\n            const {createWriteStream} = require('fs');\r\n\r\n            let archive = archiver('zip').directory(folderPath, folderInfo.base);\r\n            archive.on('error', reject);\r\n            let writeStream = archive.pipe(createWriteStream(destinationPath));\r\n            writeStream.on('error', reject);\r\n            writeStream.on('close', resolve);\r\n            archive.finalize();\r\n        };\r\n\r\n        if(archiveType === '7z'){\r\n            const seven = require('node-7z');\r\n            const sevenBin = require('7zip-bin').path7za;\r\n\r\n            let deleteOld = seven.delete(destinationPath, '*', {$bin: sevenBin});\r\n            deleteOld.on(\"error\", reject);\r\n            let addStream = seven.add(destinationPath, folderPath, {$bin: sevenBin, overwrite: 'a', charset: 'UTF-8'});\r\n            addStream.on(\"error\", reject);\r\n            addStream.on('end', resolve);\r\n        };\r\n    }));\r\n}catch(err){\r\n    let message = err.message || err;\r\n    throw `[Archive] : ${util.lang==\"ru\" ? \"Не удалось заархивировать папку\" : \"Failed to archive folder\"}, ${message}`;\r\n};",
            "DataName": "Archive_ArchiveFolder",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilArchive || require(\"../UtilArchive\");\r\nlet {archivePath, archiveType, lang} = [[ARCHIVE_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    archivePath = util.normalizePath(archivePath);\r\n    let archiveInfo = util.getPathInfo(archivePath, false, true);\r\n    archiveType = util.getArchiveType(['zip','rar','7z'], archiveType, archivePath);\r\n    let filesList = [];\r\n\r\n    if(['zip','7z'].includes(archiveType)){\r\n        await (new Promise((resolve, reject) => {\r\n            const {list} = require('node-7z');\r\n            const sevenBin = require('7zip-bin').path7za;\r\n\r\n            let listStream = list(archivePath, {$bin: sevenBin, charset: 'UTF-8'});\r\n            listStream.on(\"error\", reject);\r\n            listStream.on('data', function(data){\r\n                filesList.push(data.file);\r\n            });\r\n            listStream.on('end', resolve);\r\n        }));\r\n    };\r\n\r\n    if(archiveType === 'rar'){\r\n        const {list} = await import('unrar-promise');\r\n\r\n        filesList = (await list(archivePath)).map(function(file){\r\n            return file.path.split('\\\\').join('/');\r\n        });\r\n    };\r\n\r\n    [[ARCHIVE_NODE_PARAMETERS]] = filesList.sort();\r\n}catch(err){\r\n    let message = err.message || err;\r\n    throw `[Archive] : ${util.lang==\"ru\" ? \"Не удалось получить список файлов из архива\" : \"Failed to get the list of files from the archive\"}, ${message}`;\r\n};",
            "DataName": "Archive_GetFileList",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilArchive || require(\"../UtilArchive\");\r\nlet {filesList, destinationPath, archiveType, lang} = [[ARCHIVE_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    destinationPath = util.normalizePath(destinationPath);\r\n    archiveType = util.getArchiveType(['zip','7z'], archiveType, destinationPath);\r\n    filesList = filesList.map(function(path){return util.normalizePath(path)});\r\n\r\n    util.ensureDirectoryExistence(destinationPath);\r\n\r\n    await (new Promise((resolve, reject) => {\r\n        if(archiveType === 'zip'){\r\n            const archiver = require('archiver');\r\n            const {statSync, createWriteStream} = require('fs');\r\n            \r\n            let archive = archiver('zip');\r\n            archive.on('error', reject);\r\n            filesList.forEach(function(path){\r\n                let pathInfo = util.getPathInfo(path, false, true);\r\n                if(statSync(path).isDirectory()){\r\n                    archive.directory(path, pathInfo.base);\r\n                }else{\r\n                    archive.file(path, {name: pathInfo.base});\r\n                };\r\n            });\r\n            let writeStream = archive.pipe(createWriteStream(destinationPath));\r\n            writeStream.on('error', reject);\r\n            writeStream.on('close', resolve);\r\n            archive.finalize();\r\n        };\r\n\r\n        if(archiveType === '7z'){\r\n            const seven = require('node-7z');\r\n            const sevenBin = require('7zip-bin').path7za;\r\n\r\n            let deleteOld = seven.delete(destinationPath, '*', {$bin: sevenBin});\r\n            deleteOld.on(\"error\", reject);\r\n            let addStream = seven.add(destinationPath, filesList, {$bin: sevenBin, overwrite: 'a', charset: 'UTF-8'});\r\n            addStream.on(\"error\", reject);\r\n            addStream.on('end', resolve);\r\n        };\r\n    }));\r\n}catch(err){\r\n    let message = err.message || err;\r\n    throw `[Archive] : ${util.lang==\"ru\" ? \"Не удалось заархивировать файлы\" : \"Failed to archive files\"}, ${message}`;\r\n};",
            "DataName": "Archive_ArchiveFiles",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilArchive || require(\"../UtilArchive\");\r\nlet {archivePath, destinationPath, archiveType, filesList, password, lang} = [[ARCHIVE_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    archivePath = util.normalizePath(archivePath);\r\n    let archiveInfo = util.getPathInfo(archivePath, false, true);\r\n    archiveType = util.getArchiveType(['zip','rar','7z'], archiveType, archivePath);\r\n    destinationPath = destinationPath ? destinationPath : archiveInfo.dir;\r\n    destinationPath = util.normalizePath(destinationPath);\r\n    let unpackAll = filesList.length < 1;\r\n    filesList = unpackAll ? [] : filesList.map(function(file){return util.normalizePath(file, archiveType === 'rar', false)});\r\n    password = password ? password : undefined;\r\n\r\n    util.ensureDirectoryExistence(destinationPath);\r\n\r\n    if(['zip','7z'].includes(archiveType)){\r\n        await (new Promise((resolve, reject) => {\r\n            const {extractFull} = require('node-7z');\r\n            const sevenBin = require('7zip-bin').path7za;\r\n\r\n            let extractStream = extractFull(archivePath, destinationPath, {$bin: sevenBin, charset: 'UTF-8', overwrite: 'a', password: password, $cherryPick: filesList});\r\n            extractStream.on(\"error\", reject);\r\n            extractStream.on('end', resolve);\r\n        }));\r\n    };\r\n\r\n    if(archiveType === 'rar'){\r\n        const {unrar} = await import('unrar-promise');\r\n\r\n        await unrar(archivePath, destinationPath, {filter({path, type}){return unpackAll || filesList.includes(path)}, overwrite: true, password: password});\r\n    };\r\n}catch(err){\r\n    let message = err.message || err;\r\n    if(message.includes('Wrong password') || message.includes('unrar: parse failed')){\r\n        message = `${util.lang==\"ru\" ? \"не удалось расшифровать файлы\" : \"failed to decrypt files\"}, `;\r\n        if(password){\r\n            message += util.lang==\"ru\" ? \"указан неверный пароль\" : \"specified incorrect password\";\r\n        }else{\r\n            message += util.lang==\"ru\" ? \"требуется пароль\" : \"password required\";\r\n        };\r\n    };\r\n    throw `[Archive] : ${util.lang==\"ru\" ? \"Не удалось распаковать архив\" : \"Failed to unpack archive\"}, ${message}`;\r\n};",
            "DataName": "Archive_Unpack",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "Archive.png",
    "info": {
        "en": "Module for working with archives",
        "ru": "Модуль для работы с архивами"
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "18.10.0"
        }
    ],
    "localize": {
        "File": {"ru":"Файл"},
        "is empty": {"ru":"пуст"},
        "Archive type": {"ru":"Тип архива"},
        "Folder path": {"ru":"Путь к папке"},
        "Archive path": {"ru":"Путь к архиву"},
        "List of files": {"ru":"Список файлов"},
        "Can be blank": {"ru":"Может быть пустым"},
        "Destination path": {"ru":"Путь назначения"},
        "Don't use password": {"ru":"Не использовать пароль"},
        "in the destination path": {"ru":"в пути назначения"},
        "The archive will be completely unpacked": {"ru":"Архив будет распакован полностью"},
        "Place archive next to the original folder": {"ru":"Поместите архив рядом с исходной папкой"},
        "Place the contents of the archive next to it": {"ru":"Поместить содержимое архива рядом с ним"},
        "This action only works with zip archives.": {"ru":"Данное действие работает только с zip архивами."},
        "Get a list of files contained in the archive.": {"ru":"Получить список файлов содержащихся в архиве."},
        "The path to the archive which needs to be unpacked.": {"ru":"Путь к архиву который нужно распаковать."},
        "The path to the folder which needs to be archived.": {"ru":"Путь к папке которую нужно заархивировать."},
        "The path to the file which needs be added to archive.": {"ru":"Путь к файлу, который нужно добавить в архив."},
        "The path to the location where the archive will be saved.": {"ru":"Путь к месту в которое будет сохранен архив."},
        "This action works with both files and folders.": {"ru":"Данное действие работает как с файлами, так и с папками."},
        "The archive type will be determined by the file extension": {"ru":"Тип архива будет определен по расширению файла"},
        "Password for access to files contained in the archive.": {"ru":"Пароль для доступа к файлам, содержащимся в архиве."},
        "Unpack the contents of the archive to the specified location.": {"ru":"Распаковать содержимое архива в указанное место."},
        "Archive files and save the archive to the specified location.": {"ru":"Заархивировать файлы, и сохранить архив в указанное место."},
        "Archive folder and save the archive to the specified location.": {"ru":"Заархивировать папку, и сохранить архив в указанное место."},
        "The path to the archive from which needs to get the list of files.": {"ru":"Путь к архиву из которого нужно получить список файлов."},
        "The list can be created using actions from the \"List\" module.": {"ru":"Список можно создать с помощью действий из модуля \"Список\"."},
        "The parameters \"File 1\", \"File 2\", \"File 3\" will be used": {"ru":"Будут использованы параметры \"Файл 1\", \"Файл 2\", \"Файл 3\""},
        "If a non-existent destination path is specified, it will be created.": {"ru":"Если указан несуществующий путь назначения, он будет создан."},
        "The resulting list can be used in the \"Unpack archive\" action.": {"ru":"Полученный список можно использовать в действии \"Распаковать архив\"."},
        "The path to the location where the contents of the archive will be unpacked.": {"ru":"Путь к месту в которое будет распаковано содержимое архива."},
        "The parameters \"File 2\", \"File 3\", \"List of files\" will be used": {"ru":"Будут использованы параметры \"Файл 2\", \"Файл 3\", \"Список файлов\""},
        "The parameters \"File 1\", \"File 3\", \"List of files\" will be used": {"ru":"Будут использованы параметры \"Файл 1\", \"Файл 3\", \"Список файлов\""},
        "The parameters \"File 1\", \"File 2\", \"List of files\" will be used": {"ru":"Будут использованы параметры \"Файл 1\", \"Файл 2\", \"Список файлов\""},
        "The resulting list can be processed using actions from the \"List\" module.": {"ru":"Полученный список можно обработать с помощью действий из модуля \"Список\"."},
        "The list of files should contain not only their names but their path in the archive.": {"ru":"Список файлов должен содержать не только их названия, но и их путь в архиве."},
        "As a list, you can use a string consisting of file paths, separated by commas.": {"ru":"В качестве списка можно использовать строку, состоящую из путей к файлам, разделенных запятыми."},
        "If with same name archive already exists along the destination path, it will be overwritten.": {"ru":"Если архив с таким именем уже существует по пути назначения, то он будет перезаписан."},
        "The resulting list will contain not only the names of the files, but their path in the archive.": {"ru":"Полученный список будет содержать не только названия файлов, но их путь в архиве."},
        "Files from separate fields and the list are added to a general list of files that will be archived.": {"ru":"Файлы из отдельных полей и списка складываются в общий список файлов которые будут заархивированы."},
        "If the destination path is not specified, the archive will be unpacked to the location where it is located.": {"ru":"Если путь назначения не указан, архив будет распакован в то место, в котором он находится."},
        "If the files contained in the archive already exist along the destination path, they will be overwritten.": {"ru":"Если по пути назначения уже существуют файлы содержащиеся в архиве, то они будут перезаписаны."},
        "List of paths to the files which needs be added to archive. The list can be created using actions from the \"List\" module.": {"ru":"Список путей к файлам, которые нужно добавить в архив. Список можно создать с помощью действий из модуля \"Список\"."},
        "If the archive is password protected, then you can specify it in the corresponding parameter located in the additional settings.": {"ru":"Если архив защищен паролем, то вы можете указать его в соответствующий параметр, находящийся в дополнительных настройках."},
        "The list of files can be obtained using the \"Get file list from archive\" action or create using actions from the \"List\" module.": {"ru":"Список файлов можно получить с помощью действия \"Получить список файлов из архива\" или создать с помощью действий из модуля \"Список\"."},
        "This action can unpack not the entire archive, but only a part of it, for this you need to specify a list of files that need to be unpacked.": {"ru":"Данное действие может распаковывать не весь архив, а только его часть, для этого нужно указать список файлов которые нужно распаковать."},
        "If some of the parameters (\"File 1\", \"File 2\", \"File 3\", \"List of files\") are not specified, all parameters will be used except for them.": {"ru":"Если какие-то из параметров (\"Файл 1\", \"Файл 2\", \"Файл 3\", \"Список файлов\") не указаны, будут использованы все параметры кроме них."},
        "For example, if a file is specified in the \"File 1\" field and a list of 4 files is specified in the \"List of files\" field, then 5 files will be archived.": {"ru":"Например, если в поле \"Файл 1\" указан файл и в поле \"Список файлов\" указан список из 4 файлов, то заархивировано будет 5 файлов."},
        "If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."},
        "If the destination path is not specified, the archive will be saved to the location where the folder is located and will have the folder name and archive type in the extension.": {"ru":"Если путь назначения не указан, архив будет сохранен в то место, в котором находится папка и будет иметь её название и тип архива в расширении."},
        "The archive type is usually written in the file extension. But there are exceptions, such as Chrome extensions files have the extension .crx, but are zip archive with additional headers.": {"ru":"Тип архива обычно пишется в расширении файла. Но бывают и исключения, например файлы расширений Chrome имеют расширение .crx, но являются zip архивом с дополнительными заголовками."},
        "Variable in which, after successful completion of the action, will be recorded list of files contained in the archive. The list will contain not only the names of the files but their path in the archive.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список файлов содержащихся в архиве. Список будет содержать не только названия файлов но их путь в архиве."},
        "If the archive has incorrect format or an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если архив будет иметь неверный формат или во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."},
        "List of files to extract from the archive. The list should contain not only the names of the files but their path in the archive. The list can be obtained using the \"Get file list from archive\" action or create using actions from the \"List\" module.": {"ru":"Список файлов которые нужно извлечь из архива. Список должен содержать не только названия файлов но их путь в архиве. Список можно получить с помощь действия \"Получить список файлов из архива\" или создать с помощью действий из модуля \"Список\"."},
        "For example, if \"List of files\" is not specified, then the list will be formed from the parameters \"File 1\" and \"File 2\" and \"File 3\". If the parameters \"File 1\", \"File 2\", \"File 3\" are empty, then the \"List of files\" will be used. If all parameters are specified, then all of them will be used.": {"ru":"Например, если \"Список файлов\" не указан, то список будет сформирован из параметров \"Файл 1\" и \"Файл 2\" и \"Файл 3\". Если параметры \"Файл 1\", \"Файл 2\", \"Файл 3\" пусты, то будет использован \"Список файлов\". Если указаны все параметры, то все они будут использованы."}
    },
    "major_version": 1,
    "minor_version": 2,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "archiver",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "unrar-promise",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "node-7z",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "7zip-bin",
            "ModuleVersion": "*"
        }
    ],
    "name": "Archive"
}
