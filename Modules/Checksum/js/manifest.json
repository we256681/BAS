{
    "actions": [
		{
            "code": [
                {
                    "file": "Checksum_String_code.js",
                    "name": "Checksum_String_code"
                }
            ],
            "description": {
                "en": "String checksum",
                "ru": "Контрольная сумма строки"
            },
            "interface": "Checksum_String_interface.js",
            "is_element": false,
            "name": "Checksum_String",
            "select": "Checksum_String_select.js",
            "template": "{{input}} -> {{algorithm}} -> {{Save}}"
        },
        {
            "code": [
                {
                    "file": "Checksum_File_code.js",
                    "name": "Checksum_File_code"
                }
            ],
            "description": {
                "en": "File checksum",
                "ru": "Контрольная сумма файла"
            },
            "interface": "Checksum_File_interface.js",
            "is_element": false,
            "name": "Checksum_File",
            "select": "Checksum_File_select.js",
            "template": "{{filePath}} -> {{algorithm}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Checksum_GetAlgorithmsList_code.js",
                    "name": "Checksum_GetAlgorithmsList_code"
                }
            ],
            "description": {
                "en": "Get list of algorithms",
                "ru": "Получить список алгоритмов"
            },
            "interface": "Checksum_GetAlgorithmsList_interface.js",
            "is_element": false,
            "name": "Checksum_GetAlgorithmsList",
            "select": "Checksum_GetAlgorithmsList_select.js",
            "template": "{{Save}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "Checksum_String",
        "Checksum_File",
        "Checksum_GetAlgorithmsList"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Checksum calculation",
    "description_small": {
        "en": "Checksum",
        "ru": "Контрольная сумма"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "if(!global._UtilChecksum){\n    let util = {};\n    util.lang = \"en\";\n    \n    const crc = require(\"crc\");\n    const { createHash } = require('crypto');\n\n    const ERR_CRYPTO_HASH_FINALIZED = function(){throw new Error(util.lang==\"ru\" ? 'digest уже вызывался.' : 'digest already called.')};\n    const ERR_CRYPTO_ALGORITHM_NOT_SPECIFIED = function(){throw new Error(util.lang==\"ru\" ? 'алгоритм не указан.' : 'algorithm not specified.')};\n    const ERR_CRYPTO_UNSUPPORTED_ALGORITHM = function(){throw new Error(util.lang==\"ru\" ? 'указан неподдерживаемый алгоритм.' : 'unsupported algorithm specified.')};\n    const ERR_INVALID_ARG_TYPE = function(){throw new Error(util.lang==\"ru\" ? 'указанные данные не являются строкой или буфером.' : 'specified data is not a string or a buffer.')};\n\n    util.error = function(err){\n        throw (util.lang==\"ru\" ? 'Не удалось рассчитать контрольную сумму' : 'Failed to calculate checksum') + ', ' + (err.message || err);\n    };\n\n    util.setLang = function(lang){\n        if(!util.lang || util.lang !== lang){\n            util.lang = lang;\n        };\n    };\n\n    class crcHash {\n        constructor(algorithm){\n            this.handler = crc[algorithm];\n            this.finalized = false;\n            this.value = undefined;\n        };\n\n        update(data, encoding){\n            if(!Buffer.isBuffer(data) && typeof data !== 'string'){\n                ERR_INVALID_ARG_TYPE();\n            };\n            if(this.finalized){\n                ERR_CRYPTO_HASH_FINALIZED();\n            };\n            if(!Buffer.isBuffer(data) && encoding){\n                data = Buffer.from(data, encoding);\n            };\n            this.value = this.handler(data, this.value);\n            return this;\n        };\n\n        digest(encoding){\n            if(this.finalized){\n                ERR_CRYPTO_HASH_FINALIZED();\n            };\n            this.finalized = true;\n            return Buffer.from(this.value.toString(16), 'hex').toString(encoding);\n        };\n    };\n\n    class nobleHash {\n        constructor(algorithm){\n            this.handler = require(`@noble/hashes/${algorithm.startsWith('keccak') ? 'sha3' : algorithm}`)[algorithm.replace(/keccak_?/, 'keccak_')].create();\n            this.finalized = false;\n        };\n\n        update(data, encoding){\n            if(!Buffer.isBuffer(data) && typeof data !== 'string'){\n                ERR_INVALID_ARG_TYPE();\n            };\n            if(this.finalized){\n                ERR_CRYPTO_HASH_FINALIZED();\n            };\n            if(!Buffer.isBuffer(data)){\n                data = encoding ? Buffer.from(data, encoding) : Buffer.from(data);\n            };\n            this.handler.update(Uint8Array.from(data));\n            return this;\n        };\n\n        digest(encoding){\n            if(this.finalized){\n                ERR_CRYPTO_HASH_FINALIZED();\n            };\n            this.finalized = true;\n            return Buffer.from(this.handler.digest()).toString(encoding);\n        };\n    };\n\n    util.createHash = function(algorithm){\n        if(!algorithm){\n            ERR_CRYPTO_ALGORITHM_NOT_SPECIFIED();\n        };\n\n        if(algorithm.startsWith('crc')){\n            if(!crc.hasOwnProperty(algorithm)){\n                ERR_CRYPTO_UNSUPPORTED_ALGORITHM();\n            };\n\n            return new crcHash(algorithm);\n        }else if(algorithm==='blake3' || algorithm.startsWith('keccak')){\n            return new nobleHash(algorithm);\n        }else{\n            return createHash(...arguments);\n        };\n    };\n\n    global._UtilChecksum = util;\n};\n\nmodule.exports = global._UtilChecksum;",
            "DataName": "UtilChecksum",
            "DataType": 1,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilChecksum || require(\"../UtilChecksum\");\r\nlet {input, inputEncoding, algorithm, outputLength, outputEncoding, lang} = [[CHECKSUM_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    let hash = util.createHash(algorithm, outputLength && algorithm.toLowerCase().startsWith('shake') ? {outputLength:outputLength} : {});\r\n    if(inputEncoding){\r\n        hash.update(input, inputEncoding);\r\n    }else{\r\n        hash.update(input);\r\n    };\r\n    [[CHECKSUM_NODE_PARAMETERS]] = hash.digest(outputEncoding);\r\n}catch(err){\r\n    util.error(err);\r\n};",
            "DataName": "Checksum_String",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const util = global._UtilChecksum || require(\"../UtilChecksum\");\r\nconst { createReadStream } = require('fs');\r\nlet {filePath, algorithm, outputLength, outputEncoding, lang} = [[CHECKSUM_NODE_PARAMETERS]];\r\nutil.setLang(lang);\r\n\r\ntry{\r\n    [[CHECKSUM_NODE_PARAMETERS]] = await (new Promise((resolve, reject) => {\r\n        let hash = util.createHash(algorithm, outputLength && algorithm.toLowerCase().startsWith('shake') ? {outputLength:outputLength} : {});\r\n        let stream = createReadStream(filePath);\r\n        stream.on('error', function(err){\r\n            if(err.message.includes(\"no such file or directory\")){\r\n                reject(util.lang==\"ru\" ? (`файл \"${filePath}\" не существует`) : (`file \"${filePath}\" does not exist`));\r\n            }else{\r\n                reject(err);\r\n            };\r\n        });\r\n        stream.on('data', function(data){\r\n            hash.update(data);\r\n        });\r\n        stream.on('end', function(){\r\n            resolve(hash.digest(outputEncoding));\r\n        });\r\n    }));\r\n}catch(err){\r\n     util.error(err);\r\n};",
            "DataName": "Checksum_File",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        },
        {
            "Data": "const { getHashes } = require('crypto');\r\nconst crc = require(\"crc\");\r\n\r\nlet convert = function(el){\r\n    return typeof el===\"string\" ? (isNaN(el) ? el.toLowerCase() : Number(el)) : el;\r\n};\r\n\r\nlet algorithms = [...getHashes(), ...Object.keys(crc), 'keccak224', 'keccak256', 'keccak384', 'keccak512', 'blake3'];\r\n\r\n[[CHECKSUM_NODE_PARAMETERS]] = algorithms.filter(function(a, i){\r\n    return algorithms.indexOf(a) === i;\r\n}).sort(function(a, b){\r\n    a = convert(a);\r\n\tb = convert(b);\r\n    if(a > b){\r\n        return 1;\r\n    };\r\n    if(a < b){\r\n        return -1;\r\n    };\r\n    return 0;\r\n});",
            "DataName": "Checksum_GetAlgorithmsList",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "Checksum.png",
    "info": {
        "en": "Module for calculating the checksum of a string or file",
        "ru": "Модуль для расчета контрольной суммы строки или файла"
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "18.10.0"
        }
    ],
    "localize": {
		"bit": {"ru":"бит"},
		"files": {"ru":"файлов"},
		"strings": {"ru":"строк"},
		"String": {"ru":"Строка"},
		"Algorithm": {"ru":"Алгоритм"},
		"Result format": {"ru":"Формат результата"},
		"Result formats:": {"ru":"Форматы результата:"},
		"Shake result length": {"ru":"Длина результата shake"},
		"with extendable result": {"ru":"с удлиняемым результатом"},
		"bit hashing algorithm": {"ru":"битный алгоритм хеширования"},
		"String is base64 encoded": {"ru":"Строка закодирована в base64"},
		"Checksum for two identical": {"ru":"Контрольная сумма для двух одинаковых"},
		"Default length for the selected algorithm": {"ru":"Длина по умолчанию для выбранного алгоритма"},
		"Calculate the checksum of the specified string.": {"ru":"Рассчитать контрольную сумму указанной строки."},
		"The string for which needs to calculate the checksum.": {"ru":"Строка, для которой нужно рассчитать контрольную сумму."},
		"Algorithm <code>blake2b-512</code> is compatible with the NaCl and Sodium libraries.": {"ru":"Алгоритм <code>blake2b-512</code> совместим с библиотеками NaCl и Sodium."},
		"The format in which the final checksum will be written to the specified variable.": {"ru":"Формат, в котором итоговая контрольная сумма будет записана в указанную переменную."},
		"You can calculate the checksum for the file using the \"File checksum\" action.": {"ru":"Рассчитать контрольную сумму для файла можно с помощью действия \"Контрольная сумма файла\"."},
		"This action will return string containing the final checksum in the specified format.": {"ru":"Это действие вернет строку, содержащую итоговую контрольную сумму в указанном формате."},
		"The name of the hashing algorithm. An algorithm is a set of rules used when hashing data.": {"ru":"Название алгоритма хеширования. Алгоритм - это набор правил, используемый при хешировании данных."},
		"Variable in which, after successful execution of the action, the final checksum will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записана итоговая контрольная сумма."},
		"will always be the same, and if the data is the slightest difference, the checksum will be different.": {"ru":"всегда будет одинаковой, а если в данных есть малейшее различие, контрольная сумма будет другой."},
		"You can get full list of supported hashing algorithms using the \"Get list of algorithms\" action.": {"ru":"Получить полный список поддерживаемых алгоритмов хеширования можно с помощью действия \"Получите список алгоритмов\"."},
		"Raw hash data encoded in base64. Example: <code style=\"font-size:85%\">XUFAKrxLKna5cZ2REBfFkg==</code>": {"ru":"Необработанные хеш-данные, кодируются в base64. Пример: <code style=\"font-size:85%\">XUFAKrxLKna5cZ2REBfFkg==</code>"},
		"If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."},
		"The length of the raw checksum, used only for <code style=\"font-size:85%\">shake</code> algorithms. The length can be any integer that is greater than zero.": {"ru":"Длина необработанной контрольной суммы, используется только для <code style=\"font-size:85%\">shake</code> алгоритмов. Длина может быть любым целым числом больше нуля."},
		"Checksum is the value obtained as a result of data processing by a hash function, this function works according to a certain set of rules named an algorithm.": {"ru":"Контрольная сумма - это значение, полученное в результате обработки данных хэш-функцией, эта функция работает в соответствии с определенным набором правил, называемым алгоритмом."},
		"For <code>shake</code> algorithms, you can specify the length of the raw checksum by filling in the \"Shake result length\" parameter located in the additional settings.": {"ru":"Для <code>shake</code> алгоритмов можно указать длину необработанной контрольной суммы, заполнив параметр \"Длина результата shake\", находящийся в дополнительных настройках."},
		"If the string is encoded in base64, activate the \"String is base64 encoded\" parameter located in the additional settings. In that case, string will be treated as raw data encoded in base64.": {"ru":"Если строка закодирована в base64, активируйте параметр \"Строка закодирована в base64\", расположенный в дополнительных настройках. В этом случае строка будет рассматриваться как необработанные данные, закодированные в base64."},
		"Each byte is encoded as 16-bit number converted to 2-byte string from <code style=\"font-size:85%\">00</code> to <code style=\"font-size:85%\">ff</code>. Example: <code style=\"font-size:85%\">5d41402abc4b2a76b9719d911017c592</code>": {"ru":"Каждый байт кодируется как 16-битное число, преобразованное в 2-байтовую строку от <code style=\"font-size:85%\">00</code> до <code style=\"font-size:85%\">ff</code>. Пример: <code style=\"font-size:85%\">5d41402abc4b2a76b9719d911017c592</code>"},
		"In most cases, the checksum is used to check the integrity of data during transmission and storage, as well as to quickly compare a set of data. More information about checksums can be found in the <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://en.wikipedia.org/wiki/Checksum');return false\">Wiki</a>.": {"ru":"В большинстве случаев контрольная сумма используется для проверки целостности данных при передаче и хранении, а также для быстрого сравнения набора данных. Подробнее о контрольных суммах можно узнать в <a href=\"#\" onclick=\"BrowserAutomationStudio_OpenUrl('https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D1%83%D0%BC%D0%BC%D0%B0');return false\">Wiki</a>."},
		
		"File path": {"ru":"Путь к файлу"},
		"Calculate the checksum of the specified file.": {"ru":"Рассчитать контрольную сумму указанного файла."},
		"The path to the file for which needs to calculate the checksum.": {"ru":"Путь к файлу, для которого нужно рассчитать контрольную сумму."},
		"You can calculate the checksum for the finished string using the \"String checksum\" action.": {"ru":"Рассчитать контрольную сумму для готовой строки можно с помощью действия \"Контрольная сумма строки\"."},
        "If a resource is specified in the \"File path\" parameter, resource location will be used.": {"ru":"Если в параметре \"Путь к файлу\" указан ресурс, вместо содержимого ресурса будет браться его расположение."},
		
		"Example": {"ru":"Пример"},
		"Get list of supported hashing algorithms.": {"ru":"Получить список поддерживаемых алгоритмов хеширования."},
		"The resulting list can be processed using actions from the \"List\" module.": {"ru":"Полученный список можно обработать с помощью действий из модуля \"Список\"."},
		"This action will return a full list of the names of the supported hashing algorithms.": {"ru":"Это действие вернет полный список названий поддерживаемых алгоритмов хеширования."},
		"The resulting names of the algorithms can be used in the \"String checksum\" and \"File checksum\" actions.": {"ru":"Полученные названия алгоритмов можно использовать в действиях \"Контрольная сумма строки\" и \"Контрольная сумма файла\"."},
		"Variable in which, after successful execution of the action, the list of supported hashing algorithms will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список поддерживаемых алгоритмов хеширования."}
    },
    "major_version": 1,
    "minor_version": 2,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "crc",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "18.10.0",
            "ModuleName": "@noble/hashes",
            "ModuleVersion": "*"
        }
    ],
    "name": "Checksum"
}
